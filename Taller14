package java.util;

public class TallerClase14 {

	private static final double EPSILON = 1e-10;

    
    public static double[] lsolve(double[][] A, double[] pivote) {
        int n = pivote.length;

        for (int p = 0; p < n; p++) {

            
            int max = p;
            for (int i = p + 1; i < n; i++) {
                if (Math.abs(A[i][p]) > Math.abs(A[max][p])) {
                    max = i;
                }
            }
            double[] temp = A[p]; A[p] = A[max]; A[max] = temp;
            double   t    = pivote[p]; pivote[p] = pivote[max]; pivote[max] = t;

            
            if (Math.abs(A[p][p]) <= EPSILON) {
                throw new ArithmeticException("Matrix is singular or nearly singular");
            }

           
            for (int i = p + 1; i < n; i++) {
                double alpha = A[i][p] / A[p][p];
                pivote[i] -= alpha * pivote[p];
                for (int j = p; j < n; j++) {
                    A[i][j] -= alpha * A[p][j];
                }
            }
        }

        // back substitution
        double[] x = new double[n];
        for (int i = n - 1; i >= 0; i--) {
            double sum = 0.0;
            for (int j = i + 1; j < n; j++) {
                sum += A[i][j] * x[j];
            }
            x[i] = (pivote[i] - sum) / A[i][i];
        }
        return x;
    }


   
    public static void main(String[] args) {
        Scanner leer = new Scanner(System.in);
    double  A[][],  pivote[];
        System.out.println("digite el largo del primera matris");
        int n=leer.nextInt();

         A = new double [n][n];
         pivote = new double [n];
         System.out.println("digite valores dela matris 1");
for (int i=0;i<n;i++) {
    for(int j=0;j<n;j++){
    System.out.print("vector1 ["+i+"]:"+"["+j+"]:");
    A[i][j]=leer.nextDouble();
    }
}
System.out.println("digite valores del pivote");
for (int i=0;i<n;i++) {

        System.out.print("pivote ["+i+"]:"+":");
        pivote [i]=leer.nextInt();

}
        double[] x = lsolve(A, pivote);


       
        for (int i = 0; i < n; i++) {
            System.out.println(x[i]);
        }

    }

}
